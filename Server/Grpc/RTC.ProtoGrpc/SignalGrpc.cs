// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: signal.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace RTC.ProtoGrpc.SignalServer {
  public static partial class SignalServerService
  {
    static readonly string __ServiceName = "RTC.ProtoGrpc.SignalServer.SignalServerService";

    static readonly grpc::Marshaller<global::RTC.ProtoGrpc.SignalServer.C2S_Connect> __Marshaller_RTC_ProtoGrpc_SignalServer_C2S_Connect = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RTC.ProtoGrpc.SignalServer.C2S_Connect.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RTC.ProtoGrpc.SignalServer.RouteMessage> __Marshaller_RTC_ProtoGrpc_SignalServer_RouteMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RTC.ProtoGrpc.SignalServer.RouteMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RTC.ProtoGrpc.Data.Void> __Marshaller_RTC_ProtoGrpc_Data_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RTC.ProtoGrpc.Data.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList> __Marshaller_RTC_ProtoGrpc_SignalServer_C2S_QueryPlayerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList> __Marshaller_RTC_ProtoGrpc_SignalServer_S2C_QueryPlayerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList.Parser.ParseFrom);

    static readonly grpc::Method<global::RTC.ProtoGrpc.SignalServer.C2S_Connect, global::RTC.ProtoGrpc.SignalServer.RouteMessage> __Method_Connect = new grpc::Method<global::RTC.ProtoGrpc.SignalServer.C2S_Connect, global::RTC.ProtoGrpc.SignalServer.RouteMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Connect",
        __Marshaller_RTC_ProtoGrpc_SignalServer_C2S_Connect,
        __Marshaller_RTC_ProtoGrpc_SignalServer_RouteMessage);

    static readonly grpc::Method<global::RTC.ProtoGrpc.SignalServer.RouteMessage, global::RTC.ProtoGrpc.Data.Void> __Method_Route = new grpc::Method<global::RTC.ProtoGrpc.SignalServer.RouteMessage, global::RTC.ProtoGrpc.Data.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Route",
        __Marshaller_RTC_ProtoGrpc_SignalServer_RouteMessage,
        __Marshaller_RTC_ProtoGrpc_Data_Void);

    static readonly grpc::Method<global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList, global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList> __Method_QueryPlayerList = new grpc::Method<global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList, global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryPlayerList",
        __Marshaller_RTC_ProtoGrpc_SignalServer_C2S_QueryPlayerList,
        __Marshaller_RTC_ProtoGrpc_SignalServer_S2C_QueryPlayerList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RTC.ProtoGrpc.SignalServer.SignalReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SignalServerService</summary>
    public abstract partial class SignalServerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task Connect(global::RTC.ProtoGrpc.SignalServer.C2S_Connect request, grpc::IServerStreamWriter<global::RTC.ProtoGrpc.SignalServer.RouteMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RTC.ProtoGrpc.Data.Void> Route(global::RTC.ProtoGrpc.SignalServer.RouteMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList> QueryPlayerList(global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SignalServerService</summary>
    public partial class SignalServerServiceClient : grpc::ClientBase<SignalServerServiceClient>
    {
      /// <summary>Creates a new client for SignalServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SignalServerServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SignalServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SignalServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SignalServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SignalServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::RTC.ProtoGrpc.SignalServer.RouteMessage> Connect(global::RTC.ProtoGrpc.SignalServer.C2S_Connect request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RTC.ProtoGrpc.SignalServer.RouteMessage> Connect(global::RTC.ProtoGrpc.SignalServer.C2S_Connect request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Connect, null, options, request);
      }
      public virtual global::RTC.ProtoGrpc.Data.Void Route(global::RTC.ProtoGrpc.SignalServer.RouteMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Route(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RTC.ProtoGrpc.Data.Void Route(global::RTC.ProtoGrpc.SignalServer.RouteMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Route, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RTC.ProtoGrpc.Data.Void> RouteAsync(global::RTC.ProtoGrpc.SignalServer.RouteMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RTC.ProtoGrpc.Data.Void> RouteAsync(global::RTC.ProtoGrpc.SignalServer.RouteMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Route, null, options, request);
      }
      public virtual global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList QueryPlayerList(global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryPlayerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList QueryPlayerList(global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryPlayerList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList> QueryPlayerListAsync(global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryPlayerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RTC.ProtoGrpc.SignalServer.S2C_QueryPlayerList> QueryPlayerListAsync(global::RTC.ProtoGrpc.SignalServer.C2S_QueryPlayerList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryPlayerList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SignalServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SignalServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SignalServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Route, serviceImpl.Route)
          .AddMethod(__Method_QueryPlayerList, serviceImpl.QueryPlayerList).Build();
    }

  }
}
#endregion
